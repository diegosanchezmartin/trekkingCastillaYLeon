"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

var docgen = _interopRequireWildcard(require("vue-docgen-api"));

var _getParser = _interopRequireDefault(require("./getParser"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

vi.mock('vue-docgen-api', function () {
  return {
    parse: vi.fn()
  };
});
describe('getParser', function () {
  var parseMock;
  beforeEach(function () {
    parseMock = vi.spyOn(docgen, 'parse');
    parseMock.mockReset();
  });
  it('should return the an enriched parser function', function () {
    var parserFunc = (0, _getParser["default"])({
      webpackConfig: {}
    });
    parserFunc('file1');
    expect(parseMock).toHaveBeenCalledWith('file1', {});
  });
  it('should return the default parser function', function () {
    var parserFunc = (0, _getParser["default"])({
      webpackConfig: {
        resolve: {
          modules: ['mod'],
          alias: {
            al: 'ias'
          }
        }
      }
    });
    parserFunc('file2');
    expect(parseMock).toHaveBeenCalledWith('file2', expect.objectContaining({
      modules: ['mod'],
      alias: {
        al: 'ias'
      }
    }));
  });
  it('should return options for pugParser', function () {
    var parserFunc = (0, _getParser["default"])({
      webpackConfig: {
        module: {
          rules: [{
            loader: 'pug-loader',
            options: {
              global: 'hello'
            }
          }]
        }
      }
    });
    parserFunc('file3');
    expect(parseMock).toHaveBeenCalledWith('file3', expect.objectContaining({
      pugOptions: {
        global: 'hello'
      }
    }));
  });
  it('should return options for pugParser in use arrays', function () {
    var parserFunc = (0, _getParser["default"])({
      webpackConfig: {
        module: {
          rules: [{
            use: [{
              loader: 'pug-loader',
              options: {
                global: 'hello'
              }
            }]
          }]
        }
      }
    });
    parserFunc('file4');
    expect(parseMock).toHaveBeenCalledWith('file4', expect.objectContaining({
      pugOptions: {
        global: 'hello'
      }
    }));
  });
});