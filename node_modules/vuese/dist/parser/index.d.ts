import { ParserPlugin } from '@babel/parser';
export declare type PropType = string | string[] | null;
export interface PropsResult {
    type: PropType;
    name: string;
    typeDesc?: string[];
    required?: boolean;
    default?: string;
    defaultDesc?: string[];
    validator?: string;
    validatorDesc?: string[];
    describe?: string[];
}
export interface EventResult {
    name: string;
    describe?: string[];
    argumentsDesc?: string[];
}
export interface MethodResult {
    name: string;
    describe?: string[];
    argumentsDesc?: string[];
}
export declare type AttrsMap = {
    [key: string]: string;
};
export interface SlotResult {
    name: string;
    describe: string;
    backerDesc: string;
    bindings: AttrsMap;
}
export interface ParserOptions {
    onProp?: {
        (propsRes?: PropsResult): any;
    };
    onEvent?: {
        (eventRes?: EventResult): any;
    };
    onMethod?: {
        (methodRes?: MethodResult): any;
    };
    onSlot?: {
        (slotRes?: SlotResult): any;
    };
    onName?: {
        (name: string): any;
    };
    babelParserPlugins?: ParserPlugin[];
}
export interface ParserResult {
    props?: PropsResult[];
    events?: EventResult[];
    slots?: SlotResult[];
    methods?: MethodResult[];
    name?: string;
}
export default function (source: string, options?: ParserOptions): ParserResult;
